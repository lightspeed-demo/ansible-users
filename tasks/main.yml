---
- name: Creating groups
  tags:
    - users
    - groups
    - configuration
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.gid | default(omit) }}"
  loop: "{{ groups_to_create |flatten(levels=1) }}"

- name: Per-user group creation
  when: "'group' not in item and users_create_per_user_group"
  tags:
    - users
    - configuration
  ansible.builtin.group:
    name: "{{ item.username }}"
    gid: "{{ item.gid | default(item.uid) | default(omit) }}"
  loop: "{{ users |flatten(levels=1) }}"

- name: User creation
  tags:
    - users
    - configuration
  ansible.builtin.user:
    name: "{{ item.username }}"
    group: "{{ item.group | default(item.username if users_create_per_user_group else users_group) }}"
    # empty string removes user from all secondary groups
    groups: "{{ users }}"
    append: "{{ item.append | default(omit) }}"
    shell: "{{ item.shell if item.shell is defined else users_default_shell }}"
    password: "{{ item.password if item.password is defined else '!' }}"
    comment: "{{ item.name if item.name is defined else '' }}"
    uid: "{{ item.uid | default(omit) }}"
    home: "{{ item.home | default('/home/' + item.username) }}"
    createhome: "{{ 'yes' if users_create_homedirs else 'no' }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default(omit) }}"
    update_password: "{{ item.update_password | default(omit) }}"

- name: SSH keys
  with_subelements:
    - "{{ users }}"
    - ssh_key
    - skip_missing: true
  tags:
    - users
    - configuration
  ansible.posix.authorized_key:
    user: "{{ item.0.username }}"
    key: "{{ item.1 }}"
    path: "{{ item.0.home | default('/home/' + item.0.username) }}/{{ authorized_keys_file }}"

- name: Setup user profiles
  when: users_create_homedirs and item.profile is defined
  ansible.builtin.blockinfile:
    block: "{{ item.profile }}"
    dest: "{{ item.home | default('/home/' + item.username) }}/.profile"
    owner: "{{ item.username }}"
    group: "{{ item.group | default(item.username if users_create_per_user_group else users_group) }}"
    mode: 420
    create: true
  loop: "{{ users |flatten(levels=1) }}"

- name: Deleted user removal
  tags:
    - users
    - configuration
  ansible.builtin.user:
    name: "{{ item.username }}"
    state: absent
    remove: "{{ item.remove | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
  loop: "{{ users_deleted |flatten(levels=1) }}"

- name: Deleted per-user group removal
  when: users_create_per_user_group
  tags:
    - users
    - configuration
  ansible.builtin.group:
    name: "{{ item.username }}"
    state: absent
  loop: "{{ users_deleted |flatten(levels=1) }}"

- name: Show ip
  ansible.utils.cli_parse:
    command: show ip
